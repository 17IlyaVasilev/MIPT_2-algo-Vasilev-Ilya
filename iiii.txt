#include <iostream>
#include <vector>
#include <set>


using namespace std;


const int big = 2000000;
set<int> pset;
vector<int> mind;

void DecForPrimes(int a) {
    if (a == 1) {
        return;
    }

    pset.erase(mind[a]);
    DecForPrimes(a / mind[a]);
}

bool check(int a) {
    if (a == 1) {
        return true;
    }

    return (pset.find(mind[a]) != pset.end()) && check(a / mind[a]);
}


int main() {
    ios_base::sync_with_stdio(false);
    cin.tie(nullptr);
    cout.tie(nullptr);

    int n;
    cin >> n;
    vector<int> a(n);
    for (int i = 0; i < n; ++i) {
        cin >> a[i];
    }

    vector<int> primes;
    for (int i = 0; i <= big; ++i) {
        mind.push_back(i);
    }

    for (int k = 2; k <= big; ++k) {
        if (mind[k] == k) {
            primes.push_back(k);
        }
        for (int i = 0; i < primes.size(); ++i) {
            if (primes[i] * k <= big && primes[i] <= mind[k]) {
                mind[primes[i] * k] = primes[i];
            }
            else break;
        }
    }

    for (int i = 2; i < big; ++i) {
        if (mind[i] == i) {
            pset.insert(i);
        }
    }

    cout << a[0];
    DecForPrimes(a[0]);
    bool flag = true;

    for (int i = 1; i < n; ++i) {
        auto temp = pset.lower_bound(a[i]);
        if (flag) {
            int tempx = *temp;
            for (int j = a[i]; j < *temp; ++j) {
                if (check(j)) {
                    tempx = j;
                    DecForPrimes(j);
                    break;
                }
            }

            if (*temp == tempx) {
                pset.erase(*temp);
            }

            cout << " " << tempx;
            if (tempx != a[i]) {
                flag = false;
            }
        }
        else {
            auto temp = pset.lower_bound(1);
            cout << " " << *temp;
            pset.erase(*temp);
        }
        
    }

    return 0;
}