#include <iostream>
#include <vector>

const long long p = 1000000007;

long long binpow(long long a, long long n) {
	if (n == 0) {
		return 1;
	}
	if (n % 2 == 1) {
		return ((binpow(a, n - 1) % p) * (a % p)) % p;
	}
	else {
		long long b = binpow(a, n / 2) % p;
		return (b * b) % p;
	}
}

long long stirling_number(long long n, long long k) {
	long long k_factorial = 1;
	long long C = 1;
	long long StirlingNumber = 0;
	for (long long i = 1; i <= k; ++i) {
		k_factorial = (k_factorial * i) % p;
		C = ((((k - i + 1) * C) % p) * (binpow(i, p - 2) % p)) % p;
		if ((k + i) % 2) {
			StirlingNumber = (StirlingNumber + (p - (C * binpow(i, n)) % p)) % p;
		}
		else {
			StirlingNumber = (StirlingNumber + (C * binpow(i, n)) % p) % p;
		}
	}
	StirlingNumber = (StirlingNumber * binpow(k_factorial, p - 2) % p) % p;
	return StirlingNumber;
}


int main() {
	std::ios_base::sync_with_stdio(false);
	std::cin.tie(nullptr);
	std::cout.tie(nullptr);

	long long k, n;
	std::cin >> n >> k;
	std::vector<long long> a(n);
	long long sum_a = 0;
	for (long long i = 0; i < n; ++i) {
		std::cin >> a[i];
		sum_a = (sum_a + a[i]) % p;
	}

	std::cout << (((stirling_number(n - 1, k - 1) + ((n + k - 1) * stirling_number(n - 1, k)) % p) % p) * sum_a) % p;

	return 0;
}
