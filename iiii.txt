#include <iostream>
#include <vector>

const long long Inf = 1e9 + 1;
long long gcd(long long a, long long b) {
    if (a == 0) {
        return b;
    }
    if (a > b) {
        std::swap(a, b);
    }
    return gcd(b % a, a);
}

long long min_num_operations(const std::vector<long long>& a) {
    long long gen_gcd = 0;
    long long number_of_1 = 0;
    for (size_t i = 0; i < a.size(); ++i) {
        if (a[i] == 1) {
            ++number_of_1;
        }
        if (i == 0) {
            gen_gcd = a[i];
        }
        else {
            gen_gcd = gcd(gen_gcd, a[i]);
        }
    }
    if (gen_gcd > 1) {
        return -1;
    }
    else if (number_of_1 != 0) {
        return a.size() - number_of_1;
    }
    else {
        long long min_dec = Inf;
        for (long long i = 0; i < a.size(); ++i) {
            long long temp = a[i];
            for (long long j = i + 1; j < a.size(); ++j) {
                temp = gcd(temp, a[j]);
                if (temp == 1) {
                    min_dec = std::min(min_dec, j - i + 1);
                    break;
                }
            }
        }
        return a.size() + min_dec - 2;
    }
}

int main() {
    std::ios_base::sync_with_stdio(false);
    std::cin.tie(nullptr);
    std::cout.tie(nullptr);

    long long n;
    std::cin >> n;
    std::vector<long long> a(n);
    for (long long i = 0; i < n; ++i) {
        std::cin >> a[i];
    }

    std::cout << min_num_operations(a);

    return 0;
}
